CREATE TABLE LOADS
(
	ID SERIAL PRIMARY KEY,
	ADDRESS_A TEXT NOT NULL,
	LAT_A DECIMAL NOT NULL,
	LNG_A DECIMAL NOT NULL,
	ADDRESS_B TEXT NOT NULL,
	LAT_B DECIMAL NOT NULL,
	LNG_B DECIMAL NOT NULL,
	USER_NAME CHARACTER VARYING(50) NOT NULL,
	EMAIL TEXT NOT NULL,
	RATE DECIMAL NOT NULL,
	INSTRUCTIONS TEXT NOT NULL,
	STATUS CHARACTER VARYING(5) NOT NULL DEFAULT 'Open',
	CREATED_AT TIMESTAMP DEFAULT NOW(),
	UPDATED_AT TIMESTAMP DEFAULT NOW(),
	CHECK(STATUS IN('Open', 'Close')),
	CHECK(RATE > 0)
);

CREATE TABLE BIDS
(
	ID SERIAL PRIMARY KEY,
	LOADID INTEGER NOT NULL,
	USER_NAME CHARACTER VARYING(50) NOT NULL,
	VALUE DECIMAL NOT NULL,
	CREATED_AT TIMESTAMP DEFAULT NOW(),
	UPDATED_AT TIMESTAMP DEFAULT NOW(),
	STATUS CHARACTER VARYING(8) NOT NULL DEFAULT 'Sent',
	CONSTRAINT LOADID_FK FOREIGN KEY(LOADID) REFERENCES LOADS(ID) ON UPDATE CASCADE ON DELETE CASCADE,
	CHECK(STATUS IN('Sent', 'Accepted', 'Declined')),
	CHECK(VALUE > 0)
);

CREATE OR REPLACE FUNCTION procedure_before_accept_bid()
RETURNS TRIGGER AS $procedure_before_accept_bid$

DECLARE

BEGIN	
	IF TG_OP = 'UPDATE' THEN
		IF NEW.STATUS <> OLD.STATUS THEN 
			IF NEW.STATUS = 'Accepted' THEN 
				UPDATE BIDS SET STATUS = 'Declined', UPDATED_AT = NOW() WHERE LOADID = OLD.LOADID AND ID != OLD.ID;
				UPDATE LOADS SET STATUS = 'Close', UPDATED_AT = NOW() WHERE ID = OLD.LOADID;
			END IF;			
		END IF;
	END IF;	
RETURN NEW;
END;
$procedure_before_accept_bid$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS trigger_before_accept_bid ON BIDS;
CREATE TRIGGER trigger_before_accept_bid AFTER UPDATE ON BIDS FOR EACH ROW EXECUTE PROCEDURE procedure_before_accept_bid();



